{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","image","alt","name","desc","phone","email","CardList","_ref","users","cardComponent","map","user","i","Components_Card","key","picture","large","concat","first","last","location","state","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","_this2","fetch","then","response","json","data","results","_this3","filteredUsers","filter","toLowerCase","includes","Components_SearchBox","Components_Scroll","Components_CardList","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAgBeA,EAdF,SAACC,GACb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBC,IAAKL,EAAMM,MAAOC,IAAI,SAC5DN,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAMJ,EAAMQ,MAC1BP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMJ,EAAMS,MACzBR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMJ,EAAMU,OACzBT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMJ,EAAMW,UCiBdC,EAvBE,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MAEZC,EAAgBD,EAAME,IAAI,SAACC,EAAMC,GACtC,OACCjB,EAAAC,EAAAC,cAACgB,EAAD,CACCC,IAAKF,EACLZ,MAAOQ,EAAMI,GAAGG,QAAQC,MACxBd,KAAI,GAAAe,OAAMT,EAAMI,GAAGV,KAAKgB,MAApB,KAAAD,OAA6BT,EAAMI,GAAGV,KAAKiB,MAC/Cf,MAAOI,EAAMI,GAAGR,MAChBC,MAAOG,EAAMI,GAAGP,MAChBF,KAAMK,EAAMI,GAAGQ,SAASC,UAM3B,OACC1B,EAAAC,EAAAC,cAAA,WACMY,ICTOa,EAXG,SAAAf,GAAoB,IAAlBgB,EAAkBhB,EAAlBgB,aACnB,OACC5B,EAAAC,EAAAC,cAAA,SACAC,UAAU,8BACV0B,KAAK,SACLC,YAAY,eACZC,SAAUH,KCEGI,EARA,SAACjC,GACf,OACCC,EAAAC,EAAAC,cAAA,OAAK+B,MAAO,CAACC,UAAW,SAAWC,OAAQ,kBAAmBC,OAAQ,UACpErC,EAAMsC,WC6CKC,qBA1Cd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBCI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAhB3CZ,EAAKb,MAAQ,CACZb,MAAO,GACPoC,YAAa,IAJFV,mFASQ,IAAAa,EAAAV,KACjBW,MAAM,yCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKJ,SAAS,CAACnC,MAAO4C,EAAKC,6CAS3B,IAAAC,EAAAjB,KAEAkB,EAAgBlB,KAAKhB,MAAMb,MAAMgD,OAAO,SAAA7C,GAC5C,OAAOA,EAAKT,KAAKgB,MAAMuC,cAAcC,SAASJ,EAAKjC,MAAMuB,YAAYa,iBAIvE,OACG9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,YACAH,EAAAC,EAAAC,cAAC8D,EAAD,CAAWpC,aAAcc,KAAKI,iBAC9B9C,EAAAC,EAAAC,cAAC+D,EAAD,KACCjE,EAAAC,EAAAC,cAACgE,EAAD,CAAUrD,MAAO+C,aAnCRO,cCKEC,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAASC,MACvB,uECVNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.db766f74.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>\t{\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-gray dib br4 pa4 ma2 grow bw3 shadow-5\"> \r\n\t\t\t<img className=\"shadow-4 br4 ma2 pa2\" src={props.image} alt=\"user\"/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className=\"f4\">{props.name}</h2>\r\n\t\t\t\t<p className=\"f6\">{props.desc}</p>\r\n\t\t\t\t<p className=\"f5\">{props.phone}</p>\r\n\t\t\t\t<p className=\"f6\">{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({users}) => {\r\n\t\r\n\tconst cardComponent = users.map((user, i)=>{\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\timage={users[i].picture.large}\r\n\t\t\t\tname= {`${users[i].name.first} ${users[i].name.last}`}\r\n\t\t\t\tphone={users[i].phone}\r\n\t\t\t\temail={users[i].email}\r\n\t\t\t\tdesc={users[i].location.state}\r\n\t\t\t\t\r\n\t\t\t/>\r\n\t\t)\r\n\t})\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t     \t{cardComponent}\r\n\t    </div>\r\n\t)\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<input \r\n\t\tclassName=\"pa3 w5 ma3 bw2 shadow-3 dib\" \r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"search users\"\r\n\t\tonChange={searchChange}\r\n\t\t />\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll' , border: '1px solid black', height: '600px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll","import React, {Component} from 'react';\nimport CardList from './Components/CardList'\nimport SearchBox from './Components/SearchBox'\nimport Scroll from './Components/Scroll'\nimport './Styles/App.css'\n\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tusers: [],\n\t\t\tsearchfield: '',\n\t\t}\n\t}\n\n\n\t  componentDidMount(){\n\t    fetch('https://randomuser.me/api/?results=50')\n\t      .then(response => response.json())\n\t      .then(data => {\n\t        this.setState({users: data.results})\n\t      })\n\t  }\n\n\t  onSearchChange = (event) => {\t  \t\n\t  \tthis.setState({searchfield: event.target.value})  \n\t  }\n\n\n\trender(){\n\n\t\t\tconst filteredUsers = this.state.users.filter(user =>{\n\t  \t\treturn user.name.first.toLowerCase().includes(this.state.searchfield.toLowerCase())\t\n\t  \t\t  \t\t\n\t  \t})\n\n\t\t return (\n\t\t    <div className=\"tc\">\n\t\t      <h1 className='tc'>UserBase</h1>  \n\t\t      <SearchBox searchChange={this.onSearchChange} />\n\t\t      <Scroll>\n\t\t      \t<CardList users={filteredUsers} />\n\t\t      </Scroll>\n\t\t    </div>\n\t\t  );\n\t}\n\t \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport './Styles/index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}